#!/bin/sh

GRRL_HOME=${GRRL_HOME:-${HOME}/.grrl}

if [ ! -d "${GRRL_HOME}" ]; then
  echo "The grrl is making herself at home in ${GRRL_HOME}"
  mkdir -p "${GRRL_HOME}"
fi

# maintain history for the repl
GRRL_HISTORY="${GRRL_HOME}/grrl_history"
history -r ${GRRL_HISTORY}

# most recently posted query
GRRL_POSTED="${GRRL_HOME}/grrl_posted"

# use local project config, or user global, 
# or system global, or defaults
# by loading config in reverse order
GRRL_FILE="grrl.cfg"
if [ -r "/etc/defaults/${GRRL_FILE}" ]; then
  . "/etc/defaults/${GRRL_FILE}"
fi
if [ -r "${GRRL_HOME}/${GRRL_FILE}" ]; then
  . "${GRRL_HOME}/${GRRL_FILE}"
fi
if [ -r "./${GRRL_FILE}" ]; then
  . "./${GRRL_FILE}"
fi

DEFAULT_URL="http://localhost:7474/db/data/cypher"
CYPHER_URL=${CYPHER_URL:-${DEFAULT_URL}}

ACCEPT_TYPE="application/json"
CURL_OPTS="-X POST --fail --silent --show-error --header Content-Type:application/json"
PIPE_ACCEPT=${PIPE_ACCEPT:-"application/json"}
ONESHOT_ACCEPT=${ONESHOT_ACCEPT:-"text/plain"}
REPL_ACCEPT=${REPL_ACCEPT:-"text/plain"}
GRRL_PROMPT=${GRRL_PROMPT:-"--> "}
CYPHER_SCRIPT_DIR=${CYPHER_SCRIPT_DIR:-". "}

###
# Grrl Power

grrl_post() {
  local cql="$*"
  local json="{ \"query\": \"${cql//\"/\\\"}\", \"params\": { \"uid\": \"ee\"} }"
  set -x
  curl ${CURL_OPTS} --data "${json}" ${CYPHER_URL}
  set +x
}

grrl_handle() {
  local CMD=( ${1} )
  CMD=${CMD[0]}
  FOUND_SCRIPT=$(find_cypher_script ${CMD})
  if is_cypher "${CMD}" ; then
    grrl_post "${CMD}"
  elif [ ! $FOUND_SCRIPT = "" ]; then
    exec 4<&0
    exec < $FOUND_SCRIPT
    grrl_pipe
    exec 0<&4 4<&-
  else
    echo "Skipping: ${CMD}"
  fi

}

grrl_pipe() {
  local multiline=""
  while read line || [ -n "$line" ]; do
    multiline=$(trim "${multiline} ${line}")
    if [[ "${multiline: -1:1}" = ";" ]]; then
      cql=$( remove_semicolon "${multiline}" )
      grrl_post "${cql}"
      multiline=""
      echo ""
    fi
  done
}

grrl_repl() {
  while read -e -p "$GRRL_PROMPT" line; do
    history -s "$line"
    grrl_handle "$line"
    echo ""
  done
  history -w ${GRRL_HISTORY}
}

###
# utility functions

is_cypher() {
  local e
  local keywords=( start START match MATCH create CREATE )
  for e in ${keywords}; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

find_cypher_script() {
  echo $(find ${CYPHER_SCRIPT_DIR} -name "${1}.cypher" | head -1)
}

trim() {
  # Determine if 'extglob' is currently on.
  local extglobWasOff=1
  shopt extglob >/dev/null && extglobWasOff=0 
  (( extglobWasOff )) && shopt -s extglob # Turn 'extglob' on, if currently turned off.
  # Trim leading and trailing whitespace
  local var=$1
  var=${var##+([[:space:]])}
  var=${var%%+([[:space:]])}
  (( extglobWasOff )) && shopt -u extglob # If 'extglob' was off before, turn it back off.
  printf "$var"  # Output trimmed string.
}

remove_semicolon() {
  local var="$1"
  printf "${var/;/}"
}

###
# main, figure out context and args

if [ $# -gt 0 ]; then
  CURL_OPTS="${CURL_OPTS} --header Accept:${ONESHOT_ACCEPT}"
  grrl_handle "$@"
  exit $?
elif [[ -t 0 ]]; then
  echo "Interactive Grrl!"
  CURL_OPTS="${CURL_OPTS} --header Accept:${REPL_ACCEPT}"
  grrl_repl
else
  CURL_OPTS="${CURL_OPTS} --header Accept:${PIPE_ACCEPT}"
  grrl_pipe
  exit 0
fi
