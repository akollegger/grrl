#!/usr/bin/env bash


GRRL_HOME=${GRRL_HOME:-${HOME}/.grrl}

if [ ! -d "${GRRL_HOME}" ]; then
  echo "The grrl is making herself at home in ${GRRL_HOME}"
  mkdir -p "${GRRL_HOME}"
fi

# maintain history for the repl
GRRL_HISTORY="${GRRL_HOME}/grrl_history"
history -r ${GRRL_HISTORY}

# most recently posted query
GRRL_POSTED="${GRRL_HOME}/grrl_posted"

# use local project config, or user global, 
# or system global, or defaults
# by loading config in reverse order
GRRL_FILE="grrl.cfg"
if [ -r "/etc/defaults/${GRRL_FILE}" ]; then
  . "/etc/defaults/${GRRL_FILE}"
fi
if [ -r "${GRRL_HOME}/${GRRL_FILE}" ]; then
  . "${GRRL_HOME}/${GRRL_FILE}"
fi
if [ -r "./${GRRL_FILE}" ]; then
  . "./${GRRL_FILE}"
fi

DEFAULT_URL="http://localhost:7474/db/data/cypher"
CYPHER_URL=${CYPHER_URL:-${DEFAULT_URL}}

ACCEPT_TYPE="application/json"
CURL_OPTS=${CURL_OPTS:-"--silent --show-error --fail"}
CURL_OPTS="${CURL_OPTS} -X POST --header Content-Type:application/json"
PIPE_ACCEPT=${PIPE_ACCEPT:-"application/json"}
ONESHOT_ACCEPT=${ONESHOT_ACCEPT:-"text/plain"}
REPL_ACCEPT=${REPL_ACCEPT:-"text/plain"}
GRRL_PROMPT=${GRRL_PROMPT:-"--> "}
CYPHER_SCRIPT_DIR=${CYPHER_SCRIPT_DIR:-". "}
VERBOSE=${VERBOSE:=false}

###
# Grrl Power

grrl_post() {
  local cql="$*"
  local params=$( jsonify "${DEFINITIONS[@]}" )
  local json="{ \"query\": \"${cql//\"/\\\"}\", \"params\": ${params} }"
  if $VERBOSE; then set -x; fi
  curl ${CURL_OPTS} --data "${json}" ${CYPHER_URL}
  if $VERBOSE; then set +x; fi
}

grrl_handle() {
  local CMD=( ${1} )
  CMD=${CMD[0]}
  FOUND_SCRIPT=$(find_cypher_script ${1})
  if is_cypher "${CMD}" ; then
    grrl_post "${1}"
  elif [ ! $FOUND_SCRIPT = "" ]; then
    exec 4<&0
    exec < $FOUND_SCRIPT
    grrl_pipe
    exec 0<&4 4<&-
  else
    echo "Ignoring: ${1}"
  fi

}

grrl_pipe() {
  local multiline=""
  while read line || [ -n "$line" ]; do
    if ! is_comment "${line}"; then
      multiline=$(trim "${multiline} ${line}")
      if [[ "${multiline: -1:1}" = ";" ]]; then
        cql=$( remove_semicolon "${multiline}" )
        grrl_post "${cql}"
        multiline=""
        echo ""
      fi
    else
      if $VERBOSE; then echo "${line}"; fi
    fi
  done
}

grrl_repl() {
  while read -e -p "$GRRL_PROMPT" line; do
    history -s "$line"
    grrl_handle "$line"
    echo ""
  done
  history -w ${GRRL_HISTORY}
}

###
# utility functions

jsonify() {
  local source_array=( "${@}" )
  local as_json="{"
  local comma=""
  for pair in "${source_array[@]}"; do
    OIFS=$IFS
    IFS='='
    split=( $pair )
    as_json="${as_json}${comma} \"${split[0]}\" : \"${split[1]}\"" 
    comma=","
    IFS=$OIFS
  done
  echo "${as_json} }"
}

is_comment() {
  [[ $1 == \#* ]] && return 0
  return 1
}

is_cypher() {
  local e
  local keywords=( start START match MATCH create CREATE )
  for e in "${keywords[@]}"; do 
    [[ "$e" == $1 ]] && return 0; 
  done
  return 1
}

find_cypher_script() {
  local script="${1}"
  if [[ ! -f "${script}" ]]; then
    script=$( find ${CYPHER_SCRIPT_DIR} -name "${1}.cypher" | head -1 )
  fi
  echo "${script}"
}

trim() {
  # Determine if 'extglob' is currently on.
  local extglobWasOff=1
  shopt extglob >/dev/null && extglobWasOff=0 
  (( extglobWasOff )) && shopt -s extglob # Turn 'extglob' on, if currently turned off.
  # Trim leading and trailing whitespace
  local var=$1
  var=${var##+([[:space:]])}
  var=${var%%+([[:space:]])}
  (( extglobWasOff )) && shopt -u extglob # If 'extglob' was off before, turn it back off.
  printf "$var"  # Output trimmed string.
}

remove_semicolon() {
  local var="$1"
  printf "${var/;/}"
}

###
# main, figure out context and args

declare -a DEFINITIONS
while getopts ":d:D:v" Option
do
  case $Option in
    d | D )
      DEFINITIONS=( ${DEFINITIONS} $OPTARG )
      ;;
    v )
      VERBOSE=true
  esac
done

shift $(($OPTIND - 1))

if [ $# -gt 0 ]; then
  CURL_OPTS="${CURL_OPTS} --header Accept:${ONESHOT_ACCEPT}"
  grrl_handle "$@"
  exit $?
elif [[ -t 0 ]]; then
  echo "Interactive Grrl!"
  CURL_OPTS="${CURL_OPTS} --header Accept:${REPL_ACCEPT}"
  grrl_repl
else
  CURL_OPTS="${CURL_OPTS} --header Accept:${PIPE_ACCEPT}"
  grrl_pipe
  exit 0
fi
